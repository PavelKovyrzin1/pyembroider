import asyncio
import os
import re
import uuid
from io import BytesIO

from PIL import Image

import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher import filters

from color_data import floss_colors, color_groups, RGB
from color_process import show_color_brands, show_color_groups, add_color_brands
from color_show import create_color_grid
from colors_database import *
from process_images import send_photo_list, create_scheme

API_TOKEN = '8174585257:AAHIAJbSk_SqWaf-2MD-wTECq_aVi9INGcs'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

db_name = "../colors.db"
create_database(db_name)

awaiting_number = {}
downloaded_files = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message) -> None:
    user_id = message.chat.id
    await bot.send_message(
        user_id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PyEmbroider! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ö–µ–º—ã –¥–ª—è –≤—ã—à–∏–≤–∞–Ω–∏—è –∫—Ä–µ—Å—Ç–∏–∫–æ–º.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –∏–ª–∏ –Ω–∞—á–Ω–µ–º –∑–∞–≥—Ä—É–∑–∫—É!",
        reply_markup=await main_menu_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message) -> None:
    await bot.send_message(
        message.chat.id,
        "ü§ñ –ß—Ç–æ —è —É–º–µ—é:\n"
        "1Ô∏è‚É£ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ö–µ–º—ã –¥–ª—è –≤—ã—à–∏–≤–∫–∏.\n"
        "2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è—Ç—å —Ü–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –í–∞—Å.\n"
        "3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö —Ü–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –í–∞—Å.\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."
    )


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu_keyboard() -> types.ReplyKeyboardMarkup:
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    upload_button = types.KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    view_photos_button = types.KeyboardButton("üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ñ–æ—Ç–æ")
    add_colors_button = types.KeyboardButton("üåà –î–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–∞")
    show_colors_button = types.KeyboardButton("‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞")
    keyboard.add(upload_button, view_photos_button, add_colors_button, show_colors_button)
    return keyboard


@dp.message_handler(lambda message: message.from_user.id in awaiting_number and awaiting_number[message.from_user.id])
async def handle_number_input(message: types.Message) -> None:
    user_id = message.from_user.id
    del awaiting_number[user_id]  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è

    try:
        percent = int(message.text)
        if 1 <= percent <= 100:
            await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ö–µ–º—É...")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ
            await process_photo(user_id, percent)
            # –ó–¥–µ—Å—å –º—ã –º–æ–∂–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤ False
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
    except ValueError:
        await message.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")

    awaiting_number[user_id] = True


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(content_types=['text'])
async def handle_text(message: types.Message) -> None:
    user_id = message.chat.id

    if user_id in awaiting_number and awaiting_number[user_id]:
        return

    if message.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        await bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ö–µ–º—É.")
    elif message.text == "üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ñ–æ—Ç–æ":
        await send_photo_list(bot, user_id)
    elif message.text == "üåà –î–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–∞":
        await add_color_brands(bot, message)
    elif message.text == "‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞":
        await show_color_brands(bot, message)
    else:
        await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")

def count_files_in_directory(directory):
    entries = os.listdir(directory)
    files = [entry for entry in entries if os.path.isfile(os.path.join(directory, entry))]

    return len(files)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@dp.message_handler(content_types=['photo'])
async def handle_photo(message: types.Message) -> None:
    user_id = message.chat.id

    user_folder = f'../photos/{user_id}'
    if not os.path.exists(user_folder):
        os.makedirs(user_folder)

    if count_files_in_directory(user_folder) > 20:
        await bot.send_message(user_id,
                               "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. \n"
                               "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. \n"
                               "–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π 'üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ñ–æ—Ç–æ'\n")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –≤ –º–∞—Å—Å–∏–≤–µ photo
    file_id = message.photo[-1].file_id
    file_info = await bot.get_file(file_id)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    downloaded_file = await bot.download_file(file_info.file_path)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    photo_caption = message.caption
    if photo_caption:
        photo_caption = re.sub(r'[^–ê-–Ø–∞-—è0-9s-]', '', photo_caption).strip().replace(' ', '_')
    else:
        photo_caption = str(uuid.uuid4())

    # –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∏–º—è
    file_path = os.path.join(user_folder, f'{photo_caption}.jpg')

    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å –∫ –∏–º–µ–Ω–∏
    index = 1
    while os.path.exists(file_path):
        file_path = os.path.join(user_folder, f'{photo_caption}_{index}.jpg')
        index += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    with open(file_path, 'wb') as file:
        file.write(downloaded_file.getvalue())

    downloaded_files[user_id] = (downloaded_file, file_path)

    await bot.send_message(user_id,
                           f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–¥ –∏–º–µ–Ω–µ–º: {os.path.basename(file_path)}.\n\n"
                           f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 - –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏–∏.")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞
    awaiting_number[user_id] = True


async def process_photo(user_id: int, percent: int):
    downloaded_file, file_path = downloaded_files[user_id]
    image = Image.open(BytesIO(downloaded_file.getvalue()))

    filename = f"Scheme_{os.path.basename(file_path)}.pdf"
    await create_scheme(image, RGB, filename, percent)

    await bot.send_message(user_id, "–°—Ö–µ–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤:")

    with open(filename, 'rb') as pdf_file:
        await bot.send_document(user_id, pdf_file)

    os.remove(filename)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ü–≤–µ—Ç–æ–≤
    available_rgbs = await get_user_colors(db_name, user_id)

    # –ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–≤–µ—Ç–∞–º
    if not available_rgbs:
        await bot.send_message(user_id,
                               "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–≤–µ—Ç–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.")
        return

    await create_scheme(image, available_rgbs, filename, percent)

    await bot.send_message(user_id, "–°—Ö–µ–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–∞—à–∏—Ö —Ü–≤–µ—Ç–æ–≤:")

    with open(filename, 'rb') as pdf_file:
        await bot.send_document(user_id, pdf_file)

    os.remove(filename)


@dp.callback_query_handler(filters.Regexp('^brand_'))
async def handle_brand_selection(call: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞"""
    brand = call.data.split('_')[1]
    await show_color_groups(bot, call.message, brand)


@dp.callback_query_handler(filters.Regexp('^group_'))
async def handle_group_selection(call: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —Ü–≤–µ—Ç–æ–≤"""
    _, brand, group = call.data.split('_')

    temp_dir = '../temp_colors'
    if not os.path.exists(temp_dir):
        os.makedirs(temp_dir)

    # –°–æ–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    group_colors = []
    keywords = color_groups.get(group, [])

    for color_name, color_data in floss_colors[brand].items():
        if any(keyword in color_name for keyword in keywords):
            group_colors.append({
                'name': color_name,
                'code': color_data['code'],
                'rgb': color_data['rgb']
            })

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
    if group_colors:
        output_path = f"{temp_dir}/{brand}_{group}.png"
        await create_color_grid(brand, group_colors, output_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–µ—Ç–∫–æ–π —Ü–≤–µ—Ç–æ–≤
        with open(output_path, 'rb') as photo:
            caption = f"–¶–≤–µ—Ç–∞ –≥—Ä—É–ø–ø—ã '{group}' –±—Ä–µ–Ω–¥–∞ {brand}. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥—ã —Ü–≤–µ—Ç–æ–≤:"
            message = await bot.send_photo(call.message.chat.id, photo, caption=caption)

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–¥–æ–≤ —Ü–≤–µ—Ç–æ–≤
            color_keyboard = types.InlineKeyboardMarkup()
            for color in group_colors:
                color_button = types.InlineKeyboardButton(
                    text=color['name'] + " " + color['code'],
                    callback_data=f"color_{brand}_{color['code']}_{color['name']}"
                )
                color_keyboard.add(color_button)

            await bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥—ã —Ü–≤–µ—Ç–æ–≤:", reply_markup=color_keyboard)

        os.remove(output_path)
    else:
        await bot.send_message(call.message.chat.id, f"–¶–≤–µ—Ç–∞ –≥—Ä—É–ø–ø—ã '{group}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –±—Ä–µ–Ω–¥–∞ {brand}")

    await bot.answer_callback_query(call.id)


@dp.callback_query_handler(filters.Regexp('^color_'))
async def handle_color_selection(call: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–¥–∞ —Ü–≤–µ—Ç–∞"""
    color_brand = call.data.split('_')[1]
    color_code = call.data.split('_')[2]
    color_name = call.data.split('_')[3]
    user_id = call.message.chat.id

    color_info = floss_colors[color_brand][color_name]
    color_info['name'] = color_name

    if not await check_user_color_exists(db_name, user_id, color_brand, color_code):
        await add_user_color(db_name, user_id, color_brand, color_code)
        await bot.send_message(call.message.chat.id, f"–¶–≤–µ—Ç '{color_code}' –¥–æ–±–∞–≤–ª–µ–Ω.")
        return

    await delete_user_color(db_name, user_id, color_brand, color_code)
    await bot.send_message(call.message.chat.id, f"–¶–≤–µ—Ç '{color_code}' —É–¥–∞–ª—ë–Ω.")


# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(filters.Regexp('^(view_|delete_)'))
async def handle_callback(call: types.CallbackQuery) -> None:
    user_id = call.message.chat.id
    user_folder = f'../photos/{user_id}'

    # –ü—Ä–æ—Å–º–æ—Ç—Ä
    if call.data.startswith("view_"):
        filename = call.data.replace("view_", "")
        file_path = os.path.join(user_folder, filename)

        if os.path.exists(file_path):
            with open(file_path, 'rb') as photo:
                await bot.send_photo(user_id, photo, caption=f"–í–æ—Ç –≤–∞—à–µ —Ñ–æ—Ç–æ: {filename}")
        else:
            await bot.send_message(user_id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.")

    # –£–¥–∞–ª–µ–Ω–∏–µ
    elif call.data.startswith("delete_"):
        filename = call.data.replace("delete_", "")
        file_path = os.path.join(user_folder, filename)

        if os.path.exists(file_path):
            os.remove(file_path)
            await bot.send_message(user_id, f"–§–æ—Ç–æ {filename} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await bot.send_message(user_id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.")

    await bot.answer_callback_query(call.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ
@dp.message_handler(content_types=['video'])
async def video_handler(message: types.Message) -> None:
    await bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è GIF
@dp.message_handler(content_types=['animation'])
async def gif_handler(message: types.Message) -> None:
    await bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç GIF –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è GIF
@dp.message_handler(content_types=['document'])
async def gif_handler(message: types.Message) -> None:
    await bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ—á–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def default_handler(message: types.Message) -> None:
    await message.answer(
        "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."
    )


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
